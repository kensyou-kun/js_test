#define TINYOBJLOADER_IMPLEMENTATION
#define TINYOBJLOADER_USE_MAPBOX_EARCUT
#include "DirectXManager.h"


const D3D11_INPUT_ELEMENT_DESC g_VertexDesc[]{
	{ "POSITION", 0, DXGI_FORMAT_R32G32B32_FLOAT, 0, D3D11_APPEND_ALIGNED_ELEMENT, D3D11_INPUT_PER_VERTEX_DATA, 0 },
	{ "NORMAL",   0, DXGI_FORMAT_R32G32B32_FLOAT, 0, D3D11_APPEND_ALIGNED_ELEMENT, D3D11_INPUT_PER_VERTEX_DATA, 0 },
	{ "TEXCOORD", 0, DXGI_FORMAT_R32G32_FLOAT,    0, D3D11_APPEND_ALIGNED_ELEMENT, D3D11_INPUT_PER_VERTEX_DATA, 0 },
};

struct ConstantMatrixBuffer {
	XMFLOAT4X4 world;
	XMFLOAT4X4 view;
	XMFLOAT4X4 projection;
};

struct ConstantLight {
	XMFLOAT4 pos;               //座標(x,y,z)
	XMFLOAT4 diffuse;           //拡散(r,g,b)
	XMFLOAT4 specular;          //反射(r,g,b)
	XMFLOAT4 attenuate;         //減衰(a,b,c)
};

struct ConstantMaterial {
	XMFLOAT4 ambient;           //環境(r,g,b)
	XMFLOAT4 diffuse;           //拡散(r,g,b)
	XMFLOAT4 specular;          //反射(r,g,b,光沢度係数)
};

struct ConstantLightBuffer {
	XMFLOAT4         eyePos;   //視点座標
	XMFLOAT4         ambient;  //環境光(r,g,b)
	ConstantLight    pntLight; //点光源
	ConstantMaterial material; //物体の質感
};


int SEGMENT = 36;





CD3DTest::CD3DTest()
{
	m_pDevice = NULL;
	m_pImmediateContext = NULL;
	m_pSwapChain = NULL;
	m_pDepthStencilTexture = NULL;
	m_pRenderTargetView = NULL;
	m_pDepthStencilView = NULL;
	m_pVertexBuffer = NULL;
	m_pIndexBuffer = NULL;
	m_pMatrixBuffer = NULL;
	m_pLightBuffer = NULL;
	m_pInputLayout = NULL;
	m_pTexture = NULL;
	m_pTextureView = NULL;
	m_pSampler = NULL;
	m_pVertexShader = NULL;
	m_pPixelShader = NULL;
	m_VertexCount = 0;
	m_IndexCount = 0;
}

CD3DTest::~CD3DTest()
{
	Release();
}

HRESULT CD3DTest::Create(HWND hwnd)
{
	Release();

	HRESULT              hr;
	CRect                rect;
	DXGI_SWAP_CHAIN_DESC scDesc;

	::GetClientRect(hwnd, &rect);
	::ZeroMemory(&scDesc, sizeof(scDesc));
	scDesc.BufferCount = 1;
	scDesc.BufferDesc.Width = rect.Width();
	scDesc.BufferDesc.Height = rect.Height();
	scDesc.BufferDesc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;
	scDesc.BufferUsage = DXGI_USAGE_RENDER_TARGET_OUTPUT;
	scDesc.OutputWindow = hwnd;
	scDesc.SampleDesc.Count = 1;
	scDesc.SampleDesc.Quality = 0;
	scDesc.Windowed = TRUE;

	UINT flags = 0;
#ifdef _DEBUG
	flags |= D3D11_CREATE_DEVICE_DEBUG;
#endif
	D3D_FEATURE_LEVEL pLevels[] = { D3D_FEATURE_LEVEL_11_0 };
	D3D_FEATURE_LEVEL level;

	hr = D3D11CreateDeviceAndSwapChain(NULL,
		D3D_DRIVER_TYPE_HARDWARE,
		NULL,
		flags,
		pLevels,
		1,
		D3D11_SDK_VERSION,
		&scDesc,
		&m_pSwapChain,
		&m_pDevice,
		&level,
		&m_pImmediateContext);
	if (FAILED(hr))
		return hr;


	ID3D11Texture2D* pBackBuffer;

	hr = m_pSwapChain->GetBuffer(0, __uuidof(ID3D11Texture2D), (LPVOID*)&pBackBuffer);
	if (FAILED(hr))
		return hr;

	hr = m_pDevice->CreateRenderTargetView(pBackBuffer, NULL, &m_pRenderTargetView);
	pBackBuffer->Release();
	if (FAILED(hr))
		return hr;
#include <iostream>
#include <SDL.h>
/*
 * Lesson 1: Hello World!
 */
int main(int, char**)
{
	//Key press surfaces constants
	enum KeyPressSurfaces
	{
		KEY_PRESS_SURFACE_DEFAULT,
		KEY_PRESS_SURFACE_UP,
		KEY_PRESS_SURFACE_DOWN,
		KEY_PRESS_SURFACE_LEFT,
		KEY_PRESS_SURFACE_RIGHT,
		KEY_PRESS_SURFACE_TOTAL
	};

	//First we need to start up SDL, and make sure it went ok
	if (SDL_Init(SDL_INIT_VIDEO) != 0)
	{
		std::cout << "SDL_Init Error: " << SDL_GetError() << std::endl;
		return 1;
	}

	SDL_Window* win = SDL_CreateWindow("Hello World!", 100, 100, 640, 480, SDL_WINDOW_SHOWN);

	SDL_Renderer* ren = SDL_CreateRenderer(win, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);

	std::string imagePath = "hello.bmp";
	SDL_Surface* bmp = SDL_LoadBMP(imagePath.c_str());


	SDL_Texture* tex = SDL_CreateTextureFromSurface(ren, bmp);
	SDL_FreeSurface(bmp);

	SDL_Event e;

	gCurrentSurface = gKeyPressSurfaces[KEY_PRESS_SURFACE_DEFAULT];


	while (SDL_PollEvent(&e) != 0)
	{
		//User requests quit
		if (e.type == SDL_QUIT)
		{
			break;
		}
		//User presses a key
		else if (e.type == SDL_KEYDOWN)
		{
			//Select surfaces based on key press
			switch (e.key.keysym.sym)
			{
			case SDLK_UP:
				gCurrentSurface = gKeyPressSurfaces[KEY_PRESS_SURFACE_UP];
				break;

			case SDLK_DOWN:
				gCurrentSurface = gKeyPressSurfaces[KEY_PRESS_SURFACE_DOWN];
				break;

			case SDLK_LEFT:
				gCurrentSurface = gKeyPressSurfaces[KEY_PRESS_SURFACE_LEFT];
				break;

			case SDLK_RIGHT:
				gCurrentSurface = gKeyPressSurfaces[KEY_PRESS_SURFACE_RIGHT];
				break;

			default:
				gCurrentSurface = gKeyPressSurfaces[KEY_PRESS_SURFACE_DEFAULT];
				break;
			}
		}
		SDL_RenderClear(ren);
		SDL_RenderCopy(ren, tex, NULL, NULL);
		SDL_RenderPresent(ren);
		SDL_Delay(1000);
	}

	//Clean up our objects and quit
	SDL_DestroyTexture(tex);
	SDL_DestroyRenderer(ren);
	SDL_DestroyWindow(win);
	SDL_Quit();
#include <iostream>
#include <SDL.h>
using std::cout; using std::endl;
int main(int, char**)
{
	if (SDL_Init(SDL_INIT_VIDEO != 0))
	{
		cout << "SDL_INIT_ERROR" << endl;
	}
	SDL_Window* win = SDL_CreateWindow("Hello Fuckin SDL", 100, 100, 640, 480, SDL_WINDOW_SHOWN);
	SDL_Renderer* ren = SDL_CreateRenderer(win, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
	SDL_Surface* suf = SDL_LoadBMP("hello.bmp");
	SDL_Texture* tex = SDL_CreateTextureFromSurface(ren, suf);
	SDL_FreeSurface(suf);
	for (int i = 0; i < 3; i++)
	{
		SDL_RenderClear(ren);
		SDL_RenderCopy(ren, tex, NULL, NULL);
		SDL_RenderPresent(ren);
		SDL_Delay(1000);
	}
	SDL_DestroyTexture(tex);
	SDL_DestroyRenderer(ren);
	SDL_DestroyWindow(win);
	SDL_Quit();
	return 0;
}
	return 0;
}



	//深度ステンシルバッファ作成
	D3D11_TEXTURE2D_DESC txDesc;
	ZeroMemory(&txDesc, sizeof(txDesc));
	txDesc.Width = rect.Width();
	txDesc.Height = rect.Height();
	txDesc.MipLevels = 1;
	txDesc.ArraySize = 1;
	txDesc.Format = DXGI_FORMAT_D24_UNORM_S8_UINT;
	txDesc.SampleDesc.Count = 1;
	txDesc.SampleDesc.Quality = 0;
	txDesc.Usage = D3D11_USAGE_DEFAULT;
	txDesc.BindFlags = D3D11_BIND_DEPTH_STENCIL;
	txDesc.CPUAccessFlags = 0;
	txDesc.MiscFlags = 0;
	hr = m_pDevice->CreateTexture2D(&txDesc, NULL, &m_pDepthStencilTexture);
	if (FAILED(hr))
		return hr;

	D3D11_DEPTH_STENCIL_VIEW_DESC dsDesc;
	ZeroMemory(&dsDesc, sizeof(dsDesc));
	dsDesc.Format = txDesc.Format;
	dsDesc.ViewDimension = D3D11_DSV_DIMENSION_TEXTURE2D;
	dsDesc.Texture2D.MipSlice = 0;
	hr = m_pDevice->CreateDepthStencilView(m_pDepthStencilTexture, &dsDesc, &m_pDepthStencilView);
	if (FAILED(hr))
		return hr;


	//頂点バッファ作成
	//int     vcount = (SEGMENT + 1) * (SEGMENT / 2 + 1);
	//Vertex* pVList = new Vertex[vcount];
	vector<Vertex> vertexlist;
	vector<WORD> indexList;

	LoadObj(vertexlist, indexList);

	int     vcount = vertexlist.size();
	//vector<Vertex> vertex_t;
	//vector<WORD> index_t;

	//インデックスバッファ作成
	WORD   icount = indexList.size();

	Vertex* pVList = new Vertex[vcount];
	WORD* pIList = new WORD[icount];
	for (int i = 0; i < vcount; i++)
	{
		pVList[i] = vertexlist[i];
	}

	for (int j = 0; j < icount; j++)
	{
		pIList[j] = indexList[j];
	}


	D3D11_BUFFER_DESC vbDesc;
	vbDesc.ByteWidth = sizeof(Vertex) * vcount;
	vbDesc.Usage = D3D11_USAGE_DEFAULT;
	vbDesc.BindFlags = D3D11_BIND_VERTEX_BUFFER;
	vbDesc.CPUAccessFlags = 0;
	vbDesc.MiscFlags = 0;
	vbDesc.StructureByteStride = 0;

	D3D11_SUBRESOURCE_DATA vrData;
	vrData.pSysMem = &pVList[0];
	vrData.SysMemPitch = 0;
	vrData.SysMemSlicePitch = 0;

	hr = m_pDevice->CreateBuffer(&vbDesc, &vrData, &m_pVertexBuffer);
	if (FAILED(hr))
	{
		delete[] pVList;
		return hr;
	}
	delete[] pVList;


	//Create Index

	D3D11_BUFFER_DESC ibDesc;
	ibDesc.ByteWidth = sizeof(WORD) * icount;
	ibDesc.Usage = D3D11_USAGE_DEFAULT;
	ibDesc.BindFlags = D3D11_BIND_INDEX_BUFFER;
	ibDesc.CPUAccessFlags = 0;
	ibDesc.MiscFlags = 0;
	ibDesc.StructureByteStride = 0;

	D3D11_SUBRESOURCE_DATA irData;
	irData.pSysMem = &pIList[0];
	irData.SysMemPitch = 0;
	irData.SysMemSlicePitch = 0;

	hr = m_pDevice->CreateBuffer(&ibDesc, &irData, &m_pIndexBuffer);
	if (FAILED(hr))
	{
		delete[] pIList;
		return hr;
	}
	delete[] pIList;


	//定数バッファ作成
	D3D11_BUFFER_DESC cbDesc;
	cbDesc.ByteWidth = sizeof(ConstantMatrixBuffer);
	cbDesc.Usage = D3D11_USAGE_DEFAULT;
	cbDesc.BindFlags = D3D11_BIND_CONSTANT_BUFFER;
	cbDesc.CPUAccessFlags = 0;
	cbDesc.MiscFlags = 0;
	cbDesc.StructureByteStride = 0;

	hr = m_pDevice->CreateBuffer(&cbDesc, NULL, &m_pMatrixBuffer);
	if (FAILED(hr))
		return hr;

	cbDesc.ByteWidth = sizeof(ConstantLightBuffer);
	cbDesc.Usage = D3D11_USAGE_DEFAULT;
	cbDesc.BindFlags = D3D11_BIND_CONSTANT_BUFFER;
	cbDesc.CPUAccessFlags = 0;
	cbDesc.MiscFlags = 0;
	cbDesc.StructureByteStride = 0;

	hr = m_pDevice->CreateBuffer(&cbDesc, NULL, &m_pLightBuffer);
	if (FAILED(hr))
		return hr;


	//テクスチャ読み込み
	hr = CreateWICTextureFromFile(m_pDevice, _T("rust.jpg"), &m_pTexture, &m_pTextureView);
	if (FAILED(hr))
		return hr;

	D3D11_SAMPLER_DESC smpDesc;
	::ZeroMemory(&smpDesc, sizeof(D3D11_SAMPLER_DESC));
	smpDesc.Filter = D3D11_FILTER_MIN_MAG_MIP_LINEAR;
	smpDesc.AddressU = D3D11_TEXTURE_ADDRESS_CLAMP;
	smpDesc.AddressV = D3D11_TEXTURE_ADDRESS_CLAMP;
	smpDesc.AddressW = D3D11_TEXTURE_ADDRESS_CLAMP;
	hr = m_pDevice->CreateSamplerState(&smpDesc, &m_pSampler);
	if (FAILED(hr))
		return hr;

	//頂点レイアウト作成
	hr = m_pDevice->CreateInputLayout(g_VertexDesc, ARRAYSIZE(g_VertexDesc), g_vs_main, sizeof(g_vs_main), &m_pInputLayout);
	if (FAILED(hr))
		return hr;

	//頂点シェーダー生成
	hr = m_pDevice->CreateVertexShader(&g_vs_main, sizeof(g_vs_main), NULL, &m_pVertexShader);
	if (FAILED(hr))
		return hr;

	//ピクセルシェーダー生成
	hr = m_pDevice->CreatePixelShader(&g_ps_main, sizeof(g_ps_main), NULL, &m_pPixelShader);
	if (FAILED(hr))
		return hr;


	//ビューポート設定
	m_Viewport.TopLeftX = 0;
	m_Viewport.TopLeftY = 0;
	m_Viewport.Width = (FLOAT)rect.Width();
	m_Viewport.Height = (FLOAT)rect.Height();
	m_Viewport.MinDepth = 0.0f;
	m_Viewport.MaxDepth = 1.0f;


	m_VertexCount = vcount;
	m_IndexCount = icount;

	return hr;
}

void CD3DTest::Release()
{
	if (m_pImmediateContext)
	{
		m_pImmediateContext->ClearState();
	}
	SAFE_RELEASE(m_pVertexBuffer);
	SAFE_RELEASE(m_pIndexBuffer);
	SAFE_RELEASE(m_pMatrixBuffer);
	SAFE_RELEASE(m_pLightBuffer);
	SAFE_RELEASE(m_pInputLayout);
	SAFE_RELEASE(m_pSampler);
	SAFE_RELEASE(m_pTextureView);
	SAFE_RELEASE(m_pTexture);
	SAFE_RELEASE(m_pVertexShader);
	SAFE_RELEASE(m_pPixelShader);
	SAFE_RELEASE(m_pRenderTargetView);
	SAFE_RELEASE(m_pDepthStencilView);
	SAFE_RELEASE(m_pDepthStencilTexture);
	SAFE_RELEASE(m_pSwapChain);
	SAFE_RELEASE(m_pImmediateContext);
	SAFE_RELEASE(m_pDevice);
}

void CD3DTest::Render()
{
	m_Angle += XMConvertToRadians(1.0f);
	XMMATRIX worldMatrix = XMMatrixRotationY(m_Angle);

	XMVECTOR eye = XMVectorSet(0.0f, 3.0f, -7.0f, 0.0f);
	XMVECTOR focus = XMVectorSet(0.0f, 0.0f, 0.0f, 0.0f);
	XMVECTOR up = XMVectorSet(0.0f, 1.0f, 0.0f, 0.0f);
	XMMATRIX viewMatrix = XMMatrixLookAtLH(eye, focus, up);

	float    fov = XMConvertToRadians(20.0f);
	float    aspect = m_Viewport.Width / m_Viewport.Height;
	float    nearZ = 0.1f;
	float    farZ = 100.0f;
	XMMATRIX projMatrix = XMMatrixPerspectiveFovLH(fov, aspect, nearZ, farZ);

	XMVECTOR lightPosition = XMVectorSet(-9.5f, 9.5f, -1.0f, 0.0f);
	XMVECTOR lightAmbient = XMVectorSet(0.6f, 0.6f, 0.6f, 0.0f);
	XMVECTOR lightDiffuse = XMVectorSet(1.0f, 1.0f, 1.0f, 0.0f);
	XMVECTOR lightSpecular = XMVectorSet(1.0f, 1.0f, 1.0f, 0.0f);
	XMVECTOR lightAttenuate = XMVectorSet(1.0f, 0.0f, 0.0f, 0.0f);
	XMVECTOR materialAmbient = XMVectorSet(1.0f, 1.0f, 1.0f, 0.0f);
	XMVECTOR materialDiffuse = XMVectorSet(1.0f, 1.0f, 1.0f, 0.0f);
	XMVECTOR materialSpecular = XMVectorSet(0.5f, 0.5f, 0.5f, 50.0f);


	ConstantMatrixBuffer cmb;
	XMStoreFloat4x4(&cmb.world, XMMatrixTranspose(worldMatrix));
	XMStoreFloat4x4(&cmb.view, XMMatrixTranspose(viewMatrix));
	XMStoreFloat4x4(&cmb.projection, XMMatrixTranspose(projMatrix));
	ConstantLightBuffer clb;
	XMStoreFloat4(&clb.eyePos, eye);
	XMStoreFloat4(&clb.ambient, lightAmbient);
	XMStoreFloat4(&clb.pntLight.pos, lightPosition);
	XMStoreFloat4(&clb.pntLight.diffuse, lightDiffuse);
	XMStoreFloat4(&clb.pntLight.specular, lightSpecular);
	XMStoreFloat4(&clb.pntLight.attenuate, lightAttenuate);
	XMStoreFloat4(&clb.material.ambient, materialAmbient);
	XMStoreFloat4(&clb.material.diffuse, materialDiffuse);
	XMStoreFloat4(&clb.material.specular, materialSpecular);
	m_pImmediateContext->UpdateSubresource(m_pMatrixBuffer, 0, NULL, &cmb, 0, 0);
	m_pImmediateContext->UpdateSubresource(m_pLightBuffer, 0, NULL, &clb, 0, 0);


	float clearColor[4] = { 0.3f, 0.3f, 0.3f, 1.0f }; //red,green,blue,alpha

	UINT strides = sizeof(Vertex);
	UINT offsets = 0;
	m_pImmediateContext->IASetInputLayout(m_pInputLayout);
	m_pImmediateContext->IASetVertexBuffers(0, 1, &m_pVertexBuffer, &strides, &offsets);
	m_pImmediateContext->IASetIndexBuffer(m_pIndexBuffer, DXGI_FORMAT_R16_UINT, 0);
	m_pImmediateContext->IASetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST);
	m_pImmediateContext->VSSetConstantBuffers(0, 1, &m_pMatrixBuffer);
	m_pImmediateContext->VSSetShader(m_pVertexShader, NULL, 0);
	m_pImmediateContext->RSSetViewports(1, &m_Viewport);
	m_pImmediateContext->PSSetConstantBuffers(0, 1, &m_pLightBuffer);
	m_pImmediateContext->PSSetShader(m_pPixelShader, NULL, 0);
	m_pImmediateContext->PSSetShaderResources(0, 1, &m_pTextureView);
	m_pImmediateContext->PSSetSamplers(0, 1, &m_pSampler);
	m_pImmediateContext->OMSetRenderTargets(1, &m_pRenderTargetView, m_pDepthStencilView);

	m_pImmediateContext->ClearRenderTargetView(m_pRenderTargetView, clearColor);
	m_pImmediateContext->ClearDepthStencilView(m_pDepthStencilView, D3D11_CLEAR_DEPTH | D3D11_CLEAR_STENCIL, 1.0f, 0);
	m_pImmediateContext->DrawIndexed(m_IndexCount, 0, 0);

	m_pSwapChain->Present(0, 0);
}

void  CD3DTest::LoadObj(vector<Vertex>& vertex, vector <WORD>& indexlist)
{
	std::string inputfile = "test.obj";
	tinyobj::ObjReaderConfig reader_config;
	reader_config.mtl_search_path = "./"; // Path to material files

	tinyobj::ObjReader reader;

	if (!reader.ParseFromFile(inputfile, reader_config))
	{
		if (!reader.Error().empty())
		{
		}
		exit(1);
	}

	if (!reader.Warning().empty())
	{
	}

	auto& attrib = reader.GetAttrib();
	auto& shapes = reader.GetShapes();
	auto& materials = reader.GetMaterials();

	// Loop over shapes
	for (size_t s = 0; s < shapes.size(); s++)
	{
		// Loop over faces(polygon)
		size_t index_offset = 0;
		for (size_t f = 0; f < shapes[s].mesh.num_face_vertices.size(); f++)
		{
			size_t fv = size_t(shapes[s].mesh.num_face_vertices[f]);

			// Loop over vertices in the face.
			for (size_t v = 0; v < fv; v++)
			{
				// access to vertex
				tinyobj::index_t idx = shapes[s].mesh.indices[index_offset + v];
				WORD index = idx.vertex_index;

				tinyobj::real_t vx = attrib.vertices[3 * size_t(idx.vertex_index) + 0];
				tinyobj::real_t vy = attrib.vertices[3 * size_t(idx.vertex_index) + 1];
				tinyobj::real_t vz = attrib.vertices[3 * size_t(idx.vertex_index) + 2];

				tinyobj::real_t nx = attrib.normals[3 * size_t(idx.normal_index) + 0];
				tinyobj::real_t ny = attrib.normals[3 * size_t(idx.normal_index) + 1];
				tinyobj::real_t nz = attrib.normals[3 * size_t(idx.normal_index) + 2];

				tinyobj::real_t tx = attrib.texcoords[2 * size_t(idx.texcoord_index) + 0];
				tinyobj::real_t ty = attrib.texcoords[2 * size_t(idx.texcoord_index) + 1];
				indexlist.push_back(idx.vertex_index);

				Vertex vertex_tmp = { {vx,vy,vz},{nx,ny,nz } ,{tx,ty} };
				vertex.push_back(vertex_tmp);
			}
			index_offset += fv;
		}
	}
	return;

	/*

	tinyobj::attrib_t attrib;
	std::vector<tinyobj::shape_t> shapes;
	std::vector<tinyobj::material_t> materials;
	std::string error;
	bool ret = tinyobj::LoadObj(
		&attrib,
		&shapes,
		&materials,
		&error,
		R"(cube.obj)");

	if (!error.empty())


		if (!ret)
			exit(1);

	for (const auto& shape : shapes)
	{
		size_t index_offset = 0;  // インデントのオフセット
		for (size_t f = 0; f < shape.mesh.num_face_vertices.size(); f++)
		{

			int num_vertices = shape.mesh.num_face_vertices[f];

			for (size_t v = 0; v < num_vertices; v++)
			{
				// access to vertex
				tinyobj::index_t idx = shape.mesh.indices[index_offset + v];
				WORD index = idx.vertex_index;
				float vx = idx.normal_index > 0 ? attrib.vertices[3 * idx.vertex_index + 0] : 0;
				float vy = idx.normal_index > 0 ? attrib.vertices[3 * idx.vertex_index + 1] : 0;
				float vz = idx.normal_index > 0 ? attrib.vertices[3 * idx.vertex_index + 2] : 0;

				float nx = idx.normal_index > 0 ? attrib.normals[3 * idx.normal_index + 0] : 0;
				float ny = idx.normal_index > 0 ? attrib.normals[3 * idx.normal_index + 1] : 0;
				float nz = idx.normal_index > 0 ? attrib.normals[3 * idx.normal_index + 2] : 0;

				tinyobj::real_t tx =
					idx.normal_index > 0 ? attrib.texcoords[2 * idx.texcoord_index + 0] : 0;
				tinyobj::real_t ty =
					idx.normal_index > 0 ? attrib.texcoords[2 * idx.texcoord_index + 1] : 0;
				Vertex vertex_tmp{ {vx, vy, vz }, { nx, ny, nz },{tx,ty} };
				indexlist.push_back(index);
				vertex.push_back(vertex_tmp);
			}
			index_offset += num_vertices;
		}
	}*/
}